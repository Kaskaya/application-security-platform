"use client";

import { FC } from "react";
import {
  Loader,
  Trash2,
  ArrowDownUp,
  ArrowUp,
  ArrowDown,
  Pencil,
  AlertTriangle,
} from "lucide-react";
import { Vulnerability } from "../../store/vulnerabilityStore";
import { useRouter } from "next/navigation";
import { Badge } from "../ui/badge";

// --- Sortable Table Header (for Desktop) ---
interface SortableHeaderProps {
  label: string;
  sortKey: keyof Vulnerability;
  onSort: (key: keyof Vulnerability) => void;
  sortConfig: {
    key: keyof Vulnerability | null;
    direction: "ascending" | "descending";
  };
}
const SortableHeader: FC<SortableHeaderProps> = ({
  label,
  sortKey,
  onSort,
  sortConfig,
}) => {
  const isSorted = sortConfig.key === sortKey;
  const Icon = isSorted
    ? sortConfig.direction === "ascending"
      ? ArrowUp
      : ArrowDown
    : ArrowDownUp;
  return (
    <th
      scope="col"
      className="px-2 py-2 md:px-6 md:py-3 text-left font-medium text-gray-300 tracking-wider text-xs md:text-sm"
    >
      <button
        onClick={() => onSort(sortKey)}
        className="flex items-center gap-2 hover:text-white transition-colors"
      >
        {label}
        <Icon size={16} className={isSorted ? "text-white" : "text-gray-500"} />
      </button>
    </th>
  );
};

// --- Main Vulnerability Table Component ---
interface VulnerabilityTableProps {
  vulnerabilities: Vulnerability[];
  isLoading: boolean;
  onEdit: (item: Vulnerability) => void;
  onDelete: (item: Vulnerability) => void;
  onSort: (key: keyof Vulnerability) => void;
  sortConfig: {
    key: keyof Vulnerability | null;
    direction: "ascending" | "descending";
  };
}

function getSeverityBadgeDetails(severity: Vulnerability["severity"]) {
  switch (severity) {
    case "Critical":
      return {
        variant: "destructive" as const,
        className: "bg-red-500/10 text-red-400 border-red-500/20",
      };
    case "High":
      return {
        variant: "destructive" as const,
        className: "bg-orange-500/10 text-orange-400 border-orange-500/20",
      };
    case "Medium":
      return {
        variant: "secondary" as const,
        className: "bg-yellow-500/10 text-yellow-400 border-yellow-500/20",
      };
    case "Low":
      return {
        variant: "default" as const,
        className: "bg-green-500/10 text-green-400 border-green-500/20",
      };
    default:
      return {
        variant: "outline" as const,
        className: "bg-neutral-500/10 text-neutral-400 border-neutral-500/20",
      };
  }
}

function getStatusBadgeDetails(status: Vulnerability["status"]) {
  switch (status) {
    case "Resolved":
      return {
        variant: "outline" as const,
        className: "border-blue-500/50 text-blue-300",
      };
    case "Open":
      return {
        variant: "outline" as const,
        className: "border-red-500/50 text-red-400",
      };
    case "In Progress":
      return {
        variant: "outline" as const,
        className: "border-yellow-500/50 text-yellow-400",
      };
    case "Closed":
      return {
        variant: "outline" as const,
        className: "border-neutral-500/50 text-neutral-400",
      };
    default:
      return {
        variant: "outline" as const,
        className: "border-neutral-500/50 text-neutral-400",
      };
  }
}

export const VulnerabilityTable: FC<VulnerabilityTableProps> = ({
  vulnerabilities,
  isLoading,
  onEdit,
  onDelete,
  onSort,
  sortConfig,
}) => {
  const router = useRouter();

  if (isLoading) {
    return (
      <div className="flex justify-center items-center p-8">
        <Loader className="animate-spin h-8 w-8 text-gray-400" />
      </div>
    );
  }

  return (
    <div className="bg-[#1E1F28] rounded-xl overflow-hidden">
      {/* --- Desktop Table View --- */}
      <table className="w-full hidden md:table">
        <thead className="">
          <tr className="border-b-2 border-[#16171D]">
            <th
              scope="col"
              className="px-2 py-2 md:px-6 md:py-3 text-left font-medium text-gray-300 tracking-wider text-xs md:text-sm"
            >
              Title
            </th>
            <SortableHeader
              label="Severity"
              sortKey="severity"
              onSort={onSort}
              sortConfig={sortConfig}
            />
            <SortableHeader
              label="Status"
              sortKey="status"
              onSort={onSort}
              sortConfig={sortConfig}
            />
            <SortableHeader
              label="Risk Score"
              sortKey="riskScore"
              onSort={onSort}
              sortConfig={sortConfig}
            />
            <th
              scope="col"
              className="px-2 py-2 md:px-6 md:py-3 text-left font-medium text-gray-300 tracking-wider text-xs md:text-sm"
            >
              Affected Component
            </th>
            <th
              scope="col"
              className="px-2 py-2 md:px-6 md:py-3 text-left font-medium text-gray-300 tracking-wider text-xs md:text-sm"
            >
              <span className="sr-only">Actions</span>
            </th>
          </tr>
        </thead>
        <tbody className="divide-y-0">
          {vulnerabilities.map((item) => (
            <tr
              key={item.id}
              onClick={() => router.push(`/vulnerabilities/${item.id}`)}
              className="group hover:bg-[#16171D]/70 transition-colors cursor-pointer"
            >
              <td className="px-2 md:px-6 py-2 md:py-4 text-sm md:text-base font-medium text-white max-w-xs truncate">
                {item.title}
              </td>
              <td className="px-2 md:px-6 py-2 md:py-4 text-sm md:text-base">
                <Badge
                  variant={getSeverityBadgeDetails(item.severity).variant}
                  className={`text-sm ${
                    getSeverityBadgeDetails(item.severity).className
                  } w-28 justify-center`}
                >
                  <AlertTriangle className="h-4 w-4 mr-1.5" />
                  {item.severity}
                </Badge>
              </td>
              <td className="px-2 md:px-6 py-2 md:py-4 text-sm md:text-base">
                <span
                  className={`font-semibold ${
                    getStatusBadgeDetails(item.status).className
                  }`}
                >
                  {item.status}
                </span>
              </td>
              <td className="px-2 md:px-6 py-2 md:py-4 text-sm md:text-base text-gray-300">
                {item.riskScore}
              </td>
              <td className="px-2 md:px-6 py-2 md:py-4 text-sm md:text-base text-gray-300 max-w-xs truncate">
                {item.affectedComponent}
              </td>
              <td className="px-2 md:px-6 py-2 md:py-4 text-right text-sm md:text-base font-medium">
                <div className="flex items-center justify-end gap-2">
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      onEdit(item);
                    }}
                    className="text-sky-500 hover:text-sky-400 p-2 rounded-full transition-colors"
                    aria-label="Edit"
                  >
                    <Pencil className="w-5 h-5" />
                  </button>
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      onDelete(item);
                    }}
                    className="text-red-500 hover:text-red-400 p-2 rounded-full transition-colors"
                    aria-label="Delete"
                  >
                    <Trash2 className="w-5 h-5" />
                  </button>
                </div>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {/* --- Mobile Card View --- */}
      <div className="md:hidden">
        {/* Simple Sort Buttons for Mobile */}
        <div className="p-4 border-b border-neutral-800">
          <div className="flex flex-wrap gap-2">
            <button
              onClick={() => onSort("severity")}
              className="px-3 py-1 text-xs bg-neutral-800 text-gray-300 rounded border border-neutral-700 hover:bg-neutral-700 flex items-center gap-1"
            >
              Sort by Severity
              {sortConfig.key === "severity" &&
                (sortConfig.direction === "ascending" ? (
                  <ArrowUp size={12} />
                ) : (
                  <ArrowDown size={12} />
                ))}
            </button>
            <button
              onClick={() => onSort("status")}
              className="px-3 py-1 text-xs bg-neutral-800 text-gray-300 rounded border border-neutral-700 hover:bg-neutral-700 flex items-center gap-1"
            >
              Sort by Status
              {sortConfig.key === "status" &&
                (sortConfig.direction === "ascending" ? (
                  <ArrowUp size={12} />
                ) : (
                  <ArrowDown size={12} />
                ))}
            </button>
            <button
              onClick={() => onSort("riskScore")}
              className="px-3 py-1 text-xs bg-neutral-800 text-gray-300 rounded border border-neutral-700 hover:bg-neutral-700 flex items-center gap-1"
            >
              Sort by Risk Score
              {sortConfig.key === "riskScore" &&
                (sortConfig.direction === "ascending" ? (
                  <ArrowUp size={12} />
                ) : (
                  <ArrowDown size={12} />
                ))}
            </button>
          </div>
        </div>

        <div className="space-y-4 p-4">
          {vulnerabilities.map((item) => (
            <div
              key={item.id}
              onClick={() => router.push(`/vulnerabilities/${item.id}`)}
              className="bg-[#16171D]/70 rounded-lg border border-neutral-800 shadow-md cursor-pointer hover:bg-neutral-700/40"
            >
              <div className="p-4 space-y-3">
                <div className="flex justify-between items-start">
                  <h3 className="font-bold text-white text-base md:text-lg pr-4 truncate">
                    {item.title}
                  </h3>
                  <Badge
                    variant={getSeverityBadgeDetails(item.severity).variant}
                    className={`text-sm ${
                      getSeverityBadgeDetails(item.severity).className
                    } w-28 justify-center`}
                  >
                    <AlertTriangle className="h-4 w-4 mr-1.5" />
                    {item.severity}
                  </Badge>
                </div>
                <div className="flex justify-between items-center text-sm md:text-base">
                  <span className="text-gray-400">Status</span>
                  <span
                    className={`font-semibold ${
                      getStatusBadgeDetails(item.status).className
                    }`}
                  >
                    {item.status}
                  </span>
                </div>
                <div className="flex justify-between items-center text-sm md:text-base">
                  <span className="text-gray-400">Risk Score</span>
                  <span className="font-bold text-gray-200">
                    {item.riskScore}
                  </span>
                </div>
                <div className="text-sm md:text-base">
                  <span className="text-gray-400">Affected Component</span>
                  <p className="text-gray-200 truncate">
                    {item.affectedComponent}
                  </p>
                </div>
              </div>
              <div className="border-t border-neutral-800 px-4 py-2 flex justify-end gap-2">
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    onEdit(item);
                  }}
                  className="text-sky-500 hover:text-sky-400 p-2 rounded-full transition-colors"
                  aria-label="Edit"
                >
                  <Pencil className="w-5 h-5" />
                </button>
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    onDelete(item);
                  }}
                  className="text-red-500 hover:text-red-400 p-2 rounded-full transition-colors"
                  aria-label="Delete"
                >
                  <Trash2 className="w-5 h-5" />
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};
