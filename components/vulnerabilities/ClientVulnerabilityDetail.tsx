"use client";

import { useState } from "react";
import { Vulnerability } from "@/store/vulnerabilityStore";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  AlertTriangle,
  Shield,
  FileText,
  BarChart2,
  Tag,
  ArrowLeft,
  TrendingUp,
  Pencil,
} from "lucide-react";
import {
  RadialBarChart,
  RadialBar,
  ResponsiveContainer,
  PolarAngleAxis,
  LabelList,
  Tooltip,
} from "recharts";
import { VulnerabilityModal } from "@/components/vulnerabilities/VulnerabilityModal";
import { useVulnerabilityStore } from "@/store/vulnerabilityStore";
import { toast } from "sonner";
import { useRouter } from "next/navigation";

function getSeverityBadgeDetails(severity: Vulnerability["severity"]) {
  switch (severity) {
    case "Critical":
      return {
        variant: "destructive" as const,
        className: "bg-red-500/10 text-red-400 border-red-500/20",
      };
    case "High":
      return {
        variant: "destructive" as const,
        className: "bg-orange-500/10 text-orange-400 border-orange-500/20",
      };
    case "Medium":
      return {
        variant: "secondary" as const,
        className: "bg-yellow-500/10 text-yellow-400 border-yellow-500/20",
      };
    case "Low":
      return {
        variant: "default" as const,
        className: "bg-green-500/10 text-green-400 border-green-500/20",
      };
    default:
      return {
        variant: "outline" as const,
        className: "bg-neutral-500/10 text-neutral-400 border-neutral-500/20",
      };
  }
}

const chartData = [
  { severity: "Critical", value: 100, fill: "#9cdbfc" },
  { severity: "High", value: 80, fill: "#60a5fa" },
  { severity: "Medium", value: 60, fill: "#3b82f6" },
  { severity: "Low", value: 40, fill: "#2563eb" },
  { severity: "Info", value: 20, fill: "#1e3a8a" },
];

// Custom Tooltip for RadialBarChart
function CustomTooltip({
  active,
  payload,
}: {
  active?: boolean;
  payload?: any[];
}) {
  if (!active || !payload || !payload.length) return null;
  const { severity, value } = payload[0].payload;
  return (
    <div className="bg-[#23242a] border border-neutral-700 rounded-lg px-4 py-2 shadow-lg text-xs text-gray-200 z-[9999]">
      <div className="font-semibold capitalize text-amber-400">{severity}</div>
      <div className="text-gray-300">
        Score: <span className="font-mono">{value}</span>
      </div>
    </div>
  );
}

export default function ClientVulnerabilityDetail({
  vulnerability,
}: {
  vulnerability: Vulnerability;
}) {
  const [isEditOpen, setIsEditOpen] = useState(false);
  const updateVulnerability = useVulnerabilityStore(
    (s) => s.updateVulnerability
  );
  const [localVuln, setLocalVuln] = useState(vulnerability);
  const router = useRouter();
  const severityDetails = getSeverityBadgeDetails(localVuln.severity);

  const handleEditSave = async (
    formData: Omit<Vulnerability, "id" | "createdAt" | "updatedAt">
  ) => {
    try {
      await updateVulnerability({ ...localVuln, ...formData }, "");
      setLocalVuln((prev) => ({
        ...prev,
        ...formData,
        updatedAt: new Date().toISOString(),
      }));
      setIsEditOpen(false);
      toast.success("Vulnerability updated successfully!");
    } catch (error) {
      toast.error("Failed to update vulnerability");
    }
  };

  return (
    <div className="bg-[#16171D] text-gray-200 p-4 sm:p-6 md:p-8 font-sans rounded-b-4xl">
      <div className="mx-auto">
        <header className="mb-8 flex items-center justify-between">
          <button
            onClick={() => router.back()}
            className="flex items-center gap-2 text-gray-400 hover:text-white transition-colors cursor-pointer"
          >
            <ArrowLeft size={20} />
            <span>Back to List</span>
          </button>
          <div className="flex items-center gap-4">
            <Badge
              variant={severityDetails.variant}
              className={`text-sm ${severityDetails.className}`}
            >
              <AlertTriangle className="h-4 w-4 mr-1.5" />
              {localVuln.severity}
            </Badge>
            <Badge
              variant="outline"
              className="text-sm border-blue-500/50 text-blue-300"
            >
              <Shield className="h-4 w-4 mr-1.5" />
              {localVuln.status}
            </Badge>
            <button
              onClick={() => setIsEditOpen(true)}
              className="ml-2 p-2 rounded-full bg-neutral-800 hover:bg-neutral-700 text-sky-400 hover:text-sky-300 transition-colors border border-neutral-700"
              aria-label="Edit"
            >
              <Pencil className="w-5 h-5" />
            </button>
          </div>
        </header>
        {isEditOpen && (
          <VulnerabilityModal
            item={localVuln}
            onSave={handleEditSave}
            onClose={() => setIsEditOpen(false)}
          />
        )}
        <div className="flex flex-col lg:flex-row gap-8 items-stretch">
          {/* Left Column: Chart */}
          <div className="w-full lg:max-w-[400px] h-auto max-h-[500px] flex flex-col items-center justify-center">
            <div className="w-full h-auto max-h-[500px] bg-[#1E1F28] rounded-2xl shadow-lg border border-neutral-700/50 flex items-center justify-center relative">
              <ResponsiveContainer width="100%" height={400}>
                <RadialBarChart
                  data={chartData}
                  startAngle={-90}
                  endAngle={380}
                  innerRadius={70}
                  outerRadius={140}
                >
                  <PolarAngleAxis
                    type="number"
                    domain={[0, 100]}
                    tick={false}
                  />
                  <RadialBar
                    dataKey="value"
                    background={{ fill: "#23242a" }}
                    activeShape={() => <></>}
                  >
                    <LabelList
                      position="insideStart"
                      dataKey="severity"
                      className="fill-white capitalize mix-blend-luminosity"
                      fontSize={15}
                    />
                  </RadialBar>
                  <Tooltip
                    content={(props) => <CustomTooltip {...props} />}
                    cursor={false}
                  />
                </RadialBarChart>
              </ResponsiveContainer>
              <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
                <span className="text-4xl font-extrabold text-white drop-shadow-lg">
                  {localVuln.riskScore !== undefined ? localVuln.riskScore : 75}
                </span>
              </div>
              <div className="w-full absolute left-0 bottom-0 pb-4 flex flex-col items-center justify-center pointer-events-none">
                <span className="flex items-center gap-2 text-amber-400 font-semibold text-sm">
                  <TrendingUp className="w-4 h-4" /> Trending up by 5.2% this
                  month
                </span>
                <span className="text-xs text-gray-400 mt-1">
                  Showing risk score change for the last 6 months
                </span>
              </div>
            </div>
          </div>
          {/* Right Column: Details & Metadata */}
          <div className="flex-1 min-w-0 flex flex-col gap-8 h-auto">
            <Card className="bg-[#1E1F28] border-neutral-700/50 shadow-lg h-full">
              <CardHeader>
                <CardTitle className="text-lg text-gray-100 flex items-center gap-2">
                  <BarChart2 className="text-amber-400" />
                  Details
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4 text-sm">
                <div className="flex justify-between items-center">
                  <span className="text-gray-400">CVE ID</span>
                  <span className="font-mono bg-neutral-900 px-2 py-1 rounded text-gray-200">
                    {localVuln.cve || "N/A"}
                  </span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-gray-400">Affected Component</span>
                  <span className="text-right text-gray-200">
                    {localVuln.affectedComponent}
                  </span>
                </div>
              </CardContent>
            </Card>
            <Card className="bg-[#1E1F28] border-neutral-700/50 shadow-lg h-full">
              <CardHeader>
                <CardTitle className="text-lg text-gray-100 flex items-center gap-2">
                  <Tag className="text-amber-400" />
                  Metadata
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4 text-sm">
                <div className="flex justify-between items-center">
                  <span className="text-gray-400">Reported By</span>
                  <span className="text-gray-200">{localVuln.reportedBy}</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-gray-400">Created</span>
                  <span className="text-gray-200">
                    {new Date(localVuln.createdAt).toLocaleDateString()}
                  </span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-gray-400">Last Updated</span>
                  <span className="text-gray-200">
                    {new Date(localVuln.updatedAt).toLocaleDateString()}
                  </span>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
        {/* Bottom Row: Description */}
        <div className="mt-8">
          <Card className="bg-[#1E1F28] border-neutral-700/50 shadow-lg">
            <CardHeader>
              <CardTitle className="text-xl text-gray-100 flex items-center gap-2">
                <FileText className="text-amber-400" />
                Vulnerability Details
              </CardTitle>
            </CardHeader>
            <CardContent className="text-gray-300 prose prose-invert max-w-none prose-p:text-gray-300 prose-strong:text-white">
              <h2 className="text-2xl font-bold text-white mb-4">
                {localVuln.title}
              </h2>
              <p>{localVuln.description}</p>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}
