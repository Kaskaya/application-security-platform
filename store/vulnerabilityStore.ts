import { create } from "zustand";
import { toast } from "sonner";

export interface Vulnerability {
  id: string;
  title: string;
  description: string;
  severity: "Critical" | "High" | "Medium" | "Low" | "Informational";
  status: "Open" | "In Progress" | "Resolved" | "Closed";
  cve?: string;
  affectedComponent: string;
  reportedBy: string;
  createdAt: string;
  updatedAt: string;
  riskScore: number;
}

interface VulnerabilityState {
  vulnerabilities: Vulnerability[];
  isLoading: boolean;
  error: string | null;
  currentPage: number;
  totalPages: number;
  totalCount: number;
  fetchVulnerabilities: (
    page?: number,
    limit?: number,
    search?: string,
    sortKey?: keyof Vulnerability | null,
    sortDirection?: "ascending" | "descending"
  ) => Promise<void>;
  addVulnerability: (
    item: Omit<Vulnerability, "id" | "createdAt" | "updatedAt">
  ) => Promise<void>;
  updateVulnerability: (
    item: Vulnerability,
    currentSearch: string
  ) => Promise<void>;
  deleteVulnerability: (id: string, currentSearch: string) => Promise<void>;
  importVulnerabilities: (
    data: Omit<Vulnerability, "id" | "createdAt" | "updatedAt">[]
  ) => Promise<{ updated: number; added: number; total: number }>;
}

const fetcher = async (url: string, options: RequestInit = {}) => {
  const response = await fetch(url, options);
  if (!response.ok) {
    const errorInfo = await response
      .json()
      .catch(() => ({ message: response.statusText }));
    throw new Error(errorInfo.message || "A server error occurred.");
  }
  if (response.status === 204) return null;
  return response.json();
};

export const useVulnerabilityStore = create<VulnerabilityState>((set, get) => ({
  vulnerabilities: [],
  isLoading: true,
  error: null,
  currentPage: 1,
  totalPages: 1,
  totalCount: 0,

  fetchVulnerabilities: async (
    page = 1,
    limit = 10,
    search = "",
    sortKey?: keyof Vulnerability | null,
    sortDirection?: "ascending" | "descending"
  ) => {
    try {
      set({ isLoading: true, error: null });
      const params = new URLSearchParams({
        page: String(page),
        limit: String(limit),
        search: search,
      });

      // Add sort parameters if provided
      if (sortKey) {
        params.append("sortKey", String(sortKey));
        params.append("sortDirection", sortDirection || "ascending");
      }

      const response = await fetcher(
        `/api/vulnerabilities?${params.toString()}`
      );
      set({
        vulnerabilities: response.data,
        currentPage: response.currentPage,
        totalPages: response.totalPages,
        totalCount: response.totalCount,
        isLoading: false,
      });
    } catch (error) {
      console.error("Fetch Error:", error);
      set({ error: "Failed to load data.", isLoading: false });
    }
  },

  addVulnerability: async (item) => {
    try {
      await fetcher("/api/vulnerabilities", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(item),
      });
      get().fetchVulnerabilities(1);
    } catch (error) {
      console.error("Add Error:", error);
      toast.error("Failed to add vulnerability", {
        description:
          error instanceof Error
            ? error.message
            : "An error occurred while adding the vulnerability.",
      });
      throw error;
    }
  },

  updateVulnerability: async (item, currentSearch = "") => {
    try {
      await fetcher("/api/vulnerabilities", {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(item),
      });
      get().fetchVulnerabilities(get().currentPage, 10, currentSearch);
    } catch (error) {
      console.error("Update Error:", error);
      toast.error("Failed to update vulnerability", {
        description:
          error instanceof Error
            ? error.message
            : "An error occurred while updating the vulnerability.",
      });
      throw error;
    }
  },

  deleteVulnerability: async (id, currentSearch = "") => {
    try {
      await fetcher(`/api/vulnerabilities?id=${id}`, { method: "DELETE" });
      const { currentPage, vulnerabilities } = get();
      if (vulnerabilities.length === 1 && currentPage > 1) {
        get().fetchVulnerabilities(currentPage - 1, 10, currentSearch);
      } else {
        get().fetchVulnerabilities(currentPage, 10, currentSearch);
      }
    } catch (error) {
      console.error("Delete Error:", error);
      toast.error("Failed to delete vulnerability", {
        description:
          error instanceof Error
            ? error.message
            : "An error occurred while deleting the vulnerability.",
      });
      throw error;
    }
  },

  importVulnerabilities: async (data) => {
    try {
      set({ isLoading: true });
      const response = await fetcher("/api/import", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ data }),
      });
      get().fetchVulnerabilities(1);
      return response;
    } catch (error) {
      console.error("Import Error:", error);
      set({ error: "Data import failed.", isLoading: false });
      throw error;
    }
  },
}));
